@page "/category/create"
@page "/category/update/{id:int}"


@inject ICategoryRepository _categoryRepository
@inject NavigationManager _navigationManager
@inject IJSRuntime _js

@if (IsProcessing)
{
    <div class="row pb-3">
        <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
            <img src="/images/loading.gif" alt="loading" />
        </div>
    </div>
}
else
{
    <div class="card shadow border-0 m-4">
        <div class="card-header bg-success bg-gradient m-lg-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">@(Id == 0 ? "Create" : "Update") Category</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <EditForm Model="Category" FormName="CategoryUpsertForm" OnValidSubmit="UpsertCategory">
                <DataAnnotationsValidator />
                <div class="border p-3 mt-4">
                    <div class="form-floating py-3 col-12">
                        <lable for="Name">Name</lable>
                        <InputText @bind-Value="Category.Name" class="form-control" id="Name" placeholder="Name" />                        
                        <ValidationMessage For="@(()=> Category.Name)"/>
                    </div>
                    <div class="col-6 col-md-3">
                        <button type="submit" class="btn btn-primary" disabled="@IsProcessing"> <i class="bi bi-floppy2"></i> @(Id == 0 ? "Create" : "Update")</button>
                        <a href="category" class="btn btn-secondary"><i class="bi bi-list"></i> Back to List</a>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}



@code {
    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Category Category { get; set; } = new Category
        {
            Name = ""
        };

    private bool IsProcessing { get; set; } = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCategory();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadCategory()
    {
        if (Id > 0)
        {
            Category = await _categoryRepository.GetAsync(u=> u.Id == Id);
        }
    }

    private async Task UpsertCategory()
    {
        IsProcessing = true;
        if(Category.Id == 0)
        {
            //Create
            Category.CreatedDate = DateTime.Now;
            await _categoryRepository.CreateAsync(Category);
            await _js.ToasterSuccess("Category Created Successfully");
        }
        else
        {
            //Update
            Category.UpdatedDate = DateTime.Now;
            await _categoryRepository.UpdateAsync(Category);
            await _js.ToasterSuccess("Category Updated Successfully");
        }
        IsProcessing = false;
        _navigationManager.NavigateTo("Category");
    }

}
